# Docker Compose for ParkSathi Development and Production
# Author: Shreeraj Tuladhar - 1Ox4Fox LLC
# Complete containerized environment

version: '3.8'

services:
  # Main application
  parksathi-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: parksathi-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://parksathi-mongo:27017/parksathi
      - REDIS_URL=redis://parksathi-redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - LOG_LEVEL=info
    depends_on:
      - parksathi-mongo
      - parksathi-redis
    networks:
      - parksathi-network
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.parksathi.rule=Host(`parksathi.local`)"
      - "traefik.http.services.parksathi.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  parksathi-mongo:
    image: mongo:7.0
    container_name: parksathi-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-admin123}
      - MONGO_INITDB_DATABASE=parksathi
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - parksathi-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  parksathi-redis:
    image: redis:7.2-alpine
    container_name: parksathi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - parksathi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  parksathi-nginx:
    image: nginx:1.25-alpine
    container_name: parksathi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx-logs:/var/log/nginx
      - ssl-certs:/etc/nginx/ssl:ro
    depends_on:
      - parksathi-app
    networks:
      - parksathi-network
    labels:
      - "traefik.enable=false"

  # Development frontend (optional - for development only)
  parksathi-frontend-dev:
    build:
      context: ./parking-frontend
      dockerfile: Dockerfile.dev
    container_name: parksathi-frontend-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000/api
      - VITE_NODE_ENV=development
    volumes:
      - ./parking-frontend:/app
      - /app/node_modules
    networks:
      - parksathi-network
    profiles:
      - development

  # Development backend (optional - for development only)  
  parksathi-backend-dev:
    build:
      context: ./parking-backend
      dockerfile: Dockerfile.dev
    container_name: parksathi-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGODB_URI=mongodb://parksathi-mongo:27017/parksathi_dev
      - REDIS_URL=redis://parksathi-redis:6379
      - JWT_SECRET=dev-jwt-secret-key
    volumes:
      - ./parking-backend:/app
      - /app/node_modules
    depends_on:
      - parksathi-mongo
      - parksathi-redis
    networks:
      - parksathi-network
    profiles:
      - development

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: parksathi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - parksathi-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: parksathi-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - parksathi-network
    profiles:
      - monitoring

# Networks
networks:
  parksathi-network:
    driver: bridge
    name: parksathi-network

# Volumes
volumes:
  mongo-data:
    driver: local
    name: parksathi-mongo-data
  mongo-config:
    driver: local
    name: parksathi-mongo-config
  redis-data:
    driver: local
    name: parksathi-redis-data
  app-logs:
    driver: local
    name: parksathi-app-logs
  app-uploads:
    driver: local
    name: parksathi-app-uploads
  nginx-logs:
    driver: local
    name: parksathi-nginx-logs
  ssl-certs:
    driver: local
    name: parksathi-ssl-certs
  prometheus-data:
    driver: local
    name: parksathi-prometheus-data
  grafana-data:
    driver: local
    name: parksathi-grafana-data