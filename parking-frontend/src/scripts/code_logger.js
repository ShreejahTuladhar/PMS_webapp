#!/usr/bin/env node

/**
 * Claude Code Logger - Apprentice Learning Tool
 * Automatically logs every line of code generated by Claude
 */

import fs from 'fs';
import path from 'path';

class ClaudeCodeLogger {
  constructor() {
    this.logFile = path.join(process.cwd(), 'claude_apprentice_log.md');
    this.sessionStart = new Date();
    this.codeBlocks = [];
  }

  /**
   * Log a code block with context
   */
  logCode(codeBlock, context = {}) {
    const timestamp = new Date().toISOString();
    const entry = {
      timestamp,
      file: context.file || 'unknown',
      operation: context.operation || 'code_generation',
      language: context.language || 'javascript',
      lines: codeBlock.split('\n').length,
      code: codeBlock,
      explanation: context.explanation || '',
      learningNote: context.learningNote || ''
    };

    this.codeBlocks.push(entry);
    this.writeToLog(entry);
    
    console.log(`📝 Logged ${entry.lines} lines of ${entry.language} code`);
  }

  /**
   * Write entry to apprentice log
   */
  writeToLog(entry) {
    const logEntry = `
---

## 📝 **CODE ENTRY #${this.codeBlocks.length}**
**Time**: ${entry.timestamp}
**File**: ${entry.file}
**Operation**: ${entry.operation}
**Language**: ${entry.language}
**Lines**: ${entry.lines}

### **Generated Code:**
\`\`\`${entry.language}
${entry.code}
\`\`\`

${entry.explanation ? `### **Claude's Explanation:**\n${entry.explanation}\n` : ''}
${entry.learningNote ? `### **Learning Note:**\n${entry.learningNote}\n` : ''}
`;

    fs.appendFileSync(this.logFile, logEntry);
  }

  /**
   * Log Claude's thought process
   */
  logThought(thought, category = 'analysis') {
    const timestamp = new Date().toISOString();
    const thoughtEntry = `
### 🧠 **CLAUDE'S THOUGHT PROCESS** (${category.toUpperCase()})
**Time**: ${timestamp}

${thought}

`;
    fs.appendFileSync(this.logFile, thoughtEntry);
    console.log(`🧠 Logged thought: ${category}`);
  }

  /**
   * Log a lesson learned
   */
  logLesson(lesson, importance = 'medium') {
    const timestamp = new Date().toISOString();
    const lessonEntry = `
### 🎓 **APPRENTICE LESSON** (${importance.toUpperCase()} IMPORTANCE)
**Time**: ${timestamp}

${lesson}

`;
    fs.appendFileSync(this.logFile, lessonEntry);
    console.log(`🎓 Logged lesson: ${importance} importance`);
  }

  /**
   * Get session summary
   */
  getSessionSummary() {
    const totalLines = this.codeBlocks.reduce((sum, block) => sum + block.lines, 0);
    const languages = [...new Set(this.codeBlocks.map(b => b.language))];
    
    return {
      duration: Date.now() - this.sessionStart.getTime(),
      totalCodeBlocks: this.codeBlocks.length,
      totalLines,
      languages,
      avgLinesPerBlock: Math.round(totalLines / this.codeBlocks.length) || 0
    };
  }
}

export default ClaudeCodeLogger;

// Example usage for apprentices:
if (import.meta.url === `file://${process.argv[1]}`) {
  const logger = new ClaudeCodeLogger();
  
  // Example: Log some sample code
  logger.logCode(`
function apprenticeExample() {
  console.log("Learning from Claude!");
  return "This is how I log code";
}
`, {
    file: 'example.js',
    operation: 'teaching_example',
    language: 'javascript',
    explanation: 'This is how Claude logs every piece of code for apprentice learning',
    learningNote: 'Notice the structured approach with context and metadata'
  });

  console.log('📊 Session Summary:', logger.getSessionSummary());
}